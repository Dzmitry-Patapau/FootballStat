@using FootballStats.Data;
@using FootballStats.Data.Identity;
@using FootballStats.Models;
@using FootballStats.Services.Repository;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavigationManager
@inject IRepository _repository

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}



@if (isInitialized)
{
<div class="text-center">
    <h1 class="display-4">@h1</h1>
</div>
    if (parametrCompanenta == StatisticType.Match)
    {
        <button type="button" class="btn btn-primary" @onclick="() => FilterMatches(true)">All Matches</button>
        <button type="button" class="btn btn-primary" @onclick="() => FilterMatches(false)">Future Matches</button>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="() => FilterByReferee(0)">Score</button>
        <button type="button" class="btn btn-primary" @onclick="() => FilterByReferee(1)">Corners</button>
        <button type="button" class="btn btn-primary" @onclick="() => FilterByReferee(2)">Yellow card</button>
        <button type="button" class="btn btn-primary" @onclick="() => FilterByReferee(3)">Red card</button>
    }




    <table class="table table-striped table-bordered">
        <thead style="background-color: #007bff; color: white; font-weight: bold;">
            <tr>
                <th>Data</th>
                <th>Home</th>
                <th>ScoreHome</th>
                <th>AboutMatch</th>
                <th>AwayScore</th>
                <th>Away</th>
                <th>Referee</th>
            </tr>
        </thead>
        <tbody>
        @if(@chooseRefereeStats == 0)
        {
            @foreach (var match in matches)
            {
                <tr style="background-color: #f2f2f2;">

                    <td>@match.MatchDateTime</td>
                    <td style ="text-align:left"><img src="@match.HomeTeam.Logo" class="logo" width="50" height="50">   @match.HomeTeam.Name</td>
                    <td>@match.HomeTeamScore</td>
                    <td>
                        <button @onclick="(() => NavigateToDetails(match.MatchID))" class="btn btn-primary">Details</button>
                    </td>
                    <td>@match.AwayTeamScore</td>
                    <td style="text-align:left"><img src="@match.AwayTeam.Logo" class="logo" width="50" height="50">   @match.AwayTeam.Name</td>
                    <td>@match.Referee.Name</td>
                </tr>
            }
        }
        else
        {
                @foreach (var match in statsMatches)
                {
                    <tr style="background-color: #f2f2f2;">

                        <td>@match.MatchDateTime</td>
                        <td style="text-align:left"><img src="@match.LogoHome" class="logo" width="50" height="50">   @match.HomeTeam</td>
                        @if (chooseRefereeStats == 1)
                        {
                            <td>@match.Statistics.CornersHome</td>
                        }
                        else if (chooseRefereeStats == 2)
                        {
                            <td>@match.Statistics.YellowCardsHome</td>
                        }
                        else if (chooseRefereeStats == 3)
                        {
                            <td>@match.Statistics.RedCardsHome</td>
                        }
                        <td>
                            
                        </td>
                        @if (chooseRefereeStats == 1)
                        {
                            <td>@match.Statistics.CornersAway</td>
                        }
                        else if (chooseRefereeStats == 2)
                        {
                            <td>@match.Statistics.YellowCardsAway</td>
                        }
                        else if (chooseRefereeStats == 3)
                        {
                            <td>@match.Statistics.RedCardsAway</td>
                        }
                        <td style="text-align:left"><img src="@match.LogoAway" class="logo" width="50" height="50">   @match.AwayTeam</td>
                        <td>@match.Referee</td
                    </tr>
                }
        }   
        </tbody>
    </table>
}
else
{
    <p>Loading.....</p>
}


@code {
    [Parameter] public int RefereeId { get; set; }
    [Parameter] public int LeagueId { get; set; }
    [Parameter] public int TeamId { get; set; }
    private bool isInitialized = false;
    private IEnumerable<MatchWithStatisticsViewModel> statsMatches;
    private int chooseRefereeStats = 0;
    private IEnumerable<Match> matches = new List<Match>();
    private string errorMessage;
    private string h1;
    private StatisticType parametrCompanenta;
    // public enum StatisticType
    // {
    //     Referee,
    //     League,
    //     Team,
    //     Match
    // }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isInitialized)
        {
            try
            {
                switch (1)
                {
                    case var _ when RefereeId != 0:
                        matches = await _repository.GetMatchesForReferee(RefereeId);
                        h1 = "All matches referee";
                        parametrCompanenta = StatisticType.Referee;
                        break;
                    case var _ when LeagueId != 0:
                        matches = await _repository.GetMatchesForLeague(LeagueId);
                        h1 = "All matches league";
                         parametrCompanenta = StatisticType.League;
                        break;
                    case var _ when TeamId != 0:
                        matches = await _repository.GetMatchesForTeam(TeamId);
                        h1 = "All matches team";
                        parametrCompanenta = StatisticType.Team;
                        break;
                    default:
                        matches = await _repository.GetAllMatches();
                        h1 = "All matches in database";
                        parametrCompanenta = StatisticType.Match;
                        break;
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"An error occurred while retrieving matches: {ex.Message}";
            } 
            isInitialized = true;
            StateHasChanged(); 
        }
    }
    private async Task FilterMatches(bool allMatches)
    {
        try
        {
            if (allMatches)
                matches = await _repository.GetAllMatches();
            else
            {
                DateTime currentDate = DateTime.Now;
                matches = (await _repository.GetAllMatches())
                      .Where(match => match.MatchDateTime > currentDate)
                      .ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while retrieving matches: {ex.Message}";
        }
    }
    private async Task FilterByReferee(int stat)
    {
        try
        {
            chooseRefereeStats = stat;
            statsMatches = await _repository.GetMatchesWithStatictics(matches);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while retrieving matches: {ex.Message}";
        }
    }
    private void NavigateToDetails(int matchId)
    {
        NavigationManager.NavigateTo($"/matches/Details/{matchId}", forceLoad: true);
    }

}